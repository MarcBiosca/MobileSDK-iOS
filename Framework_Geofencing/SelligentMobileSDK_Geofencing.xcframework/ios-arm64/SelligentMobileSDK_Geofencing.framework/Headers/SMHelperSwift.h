#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef SELLIGENTMOBILESDK_GEOFENCING_SWIFT_H
#define SELLIGENTMOBILESDK_GEOFENCING_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapKit;
@import ObjectiveC;
@import PlotProjects;
@import UIKit;
@import UserNotifications;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SelligentMobileSDK_Geofencing",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



@class NSString;
@class NSDate;
enum kSMNotificationMessageType_ : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing13SMBaseMessage")
@interface SMBaseMessage : NSObject <NSCoding>
/// String value of the message Id
@property (nonatomic, readonly, copy) NSString * _Nonnull idMessage;
/// Date value of the message reception date
@property (nonatomic, readonly, copy) NSDate * _Nonnull receptionDate;
/// Date value of the message expiration date, if any
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
/// Date value of the message creation date
@property (nonatomic, readonly, copy) NSDate * _Nonnull creationDate;
/// Bool value indication whether the message has been viewed (at least once), or not
@property (nonatomic, readonly) BOOL isViewed;
/// The inapp-message type (if any)
@property (nonatomic, readonly) enum kSMNotificationMessageType_ type;
/// Inherited from NSCoding.encode(with:).
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Inherited from NSCoding.encode(with:).
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Returns an integer that can be used as a table address in a hash table structure.
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, kSMClearCache_, "SMClearCache", open) {
/// This explicitely disable the SDK-cache mechanism.
  kSMClearCache_None = 0,
/// This is the default value.
  kSMClearCache_Auto = 1,
/// Clear the cache weekly
  kSMClearCache_Week = 2,
/// Clear the cache monthly
  kSMClearCache_Month = 3,
/// Clear the cache quarterly
  kSMClearCache_Quarter = 4,
};


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing11SMConstants")
@interface SMConstants : NSObject
/// Domain used by the SDK for custom error handling
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMErrorDomain;)
+ (NSString * _Nonnull)kSMErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// It is broadcasted when the user interacts with a Remote Notification. It can be used to retrieve user action on a received remote-notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Event_ButtonClicked;)
+ (NSString * _Nonnull)kSMNotification_Event_ButtonClicked SWIFT_WARN_UNUSED_RESULT;
/// It is broadcasted shortly before displaying a Remote Notification. It can be used to pause any ongoing work before the Remote Notification is displayed. This notification-name is also triggered even if you disable <code>SMManagerSetting/shouldDisplayRemoteNotification</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Event_WillDisplayNotification;)
+ (NSString * _Nonnull)kSMNotification_Event_WillDisplayNotification SWIFT_WARN_UNUSED_RESULT;
/// It is broadcasted shortly before dismissing the current Remote Notification. It can be used to resume any paused work.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Event_WillDismissNotification;)
+ (NSString * _Nonnull)kSMNotification_Event_WillDismissNotification SWIFT_WARN_UNUSED_RESULT;
/// It is broadcasted shortly after receiving a Remote Notification. It can be used to decide when to display a remote-notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Event_DidReceiveRemoteNotification;)
+ (NSString * _Nonnull)kSMNotification_Event_DidReceiveRemoteNotification SWIFT_WARN_UNUSED_RESULT;
/// It is broadcasted shortly after receiving in-app messages. It can be used to manage the received in-app messages.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Event_DidReceiveInAppMessage;)
+ (NSString * _Nonnull)kSMNotification_Event_DidReceiveInAppMessage SWIFT_WARN_UNUSED_RESULT;
/// It is broadcasted shortly after receiving in-app contents.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Event_DidReceiveInAppContent;)
+ (NSString * _Nonnull)kSMNotification_Event_DidReceiveInAppContent SWIFT_WARN_UNUSED_RESULT;
/// It is broadcasted shortly after receiving a Selligent deviceId value. It can be used to manage the received device id.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Event_DidReceiveDeviceId;)
+ (NSString * _Nonnull)kSMNotification_Event_DidReceiveDeviceId SWIFT_WARN_UNUSED_RESULT;
/// Use this Key to retrieve the object <code>SMLink</code>, from the NSNotification-name <code>SMConstants/kSMNotification_Event_ButtonClicked</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Data_ButtonData;)
+ (NSString * _Nonnull)kSMNotification_Data_ButtonData SWIFT_WARN_UNUSED_RESULT;
/// Use this Key to retrieve a Dictionary instance with the Push Id and title, from the NSNotification-name <code>SMConstants/kSMNotification_Event_DidReceiveRemoteNotification</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Data_RemoteNotification;)
+ (NSString * _Nonnull)kSMNotification_Data_RemoteNotification SWIFT_WARN_UNUSED_RESULT;
/// Use this Key to retrieve an Array instance with Dictionary instances containing  id and title as properties, from the NSNotification-name <code>SMConstants/kSMNotification_Event_DidReceiveInAppMessage</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Data_InAppMessage;)
+ (NSString * _Nonnull)kSMNotification_Data_InAppMessage SWIFT_WARN_UNUSED_RESULT;
/// Use this Key to retrieve an Array instance of <code>SMInAppContentMessage</code>, from the NSNotification-name <code>SMConstants/kSMNotification_Event_DidReceiveInAppContent</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Data_InAppContent;)
+ (NSString * _Nonnull)kSMNotification_Data_InAppContent SWIFT_WARN_UNUSED_RESULT;
/// Use this Key to retrieve an <code>String</code> instance with the Selligent deviceId value, from the NSNotification-name <code>SMConstants/kSMNotification_Event_DidReceiveDeviceId</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSMNotification_Data_DeviceId;)
+ (NSString * _Nonnull)kSMNotification_Data_DeviceId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








typedef SWIFT_ENUM_NAMED(NSInteger, kSMAlign, "SMContentAlignment", open) {
/// The content will be left-aligned.
  kSMAlignLeft = 0,
/// The content will be right-aligned.
  kSMAlignRight = 1,
/// The content will be centered.
  kSMAlignCenter = 2,
};


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing13SMDeviceInfos")
@interface SMDeviceInfos : NSObject
/// Creates a <code>SMDeviceInfos</code> object with an external id property set with the provided value
/// \param externalId Any External Id in your possession that you wish to transmit to the back-end
///
///
/// returns:
/// An <code>SMDeviceInfos</code> object
- (nonnull instancetype)initWithExternalId:(NSString * _Nonnull)externalId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, kSMDisplayMode_, "SMDisplayMode", open) {
/// This explicitely sets the displayMode to unknown
  kSMDisplayMode_Unknown = -1,
/// Display only once
  kSMDisplayMode_OnlyOnce = 0,
/// Always display until replaced
  kSMDisplayMode_UntilReplaced = 1,
};

typedef SWIFT_ENUM(NSInteger, SMError, open) {
/// Some function parameters are missing
  SMErrorMissingParameters = 1000,
/// Some function parameters are wrongly formatted
  SMErrorWrongParameters = 1001,
/// Some settings at app level are missing or wrong
  SMErrorWrongAppSettings = 2000,
};

@class SMSuccess;
@class SMFailure;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing7SMEvent")
@interface SMEvent : NSObject <NSCoding>
/// Confirm if the current event should be cached or not
/// If the event fail to be delivered to your backend, then by default, it is cached into an internal queue.
/// After a while, the library will automaticly try to send it again.
/// Should you want to prevent this behaviour, feel free to set this property to <em>false</em>.
/// By default, it is set to <em>true</em>
@property (nonatomic) BOOL shouldCache;
/// Create an event object that will be sent to platform
/// \param name The name for the custom event (currently not sent to the backend, future-proof property), used to identify what the event needs to do at server side
///
/// \param properties A dictionary containing any kind of custom data that must be stored and managed by platform
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Allow to initialize a success block and/or a failure block that will be triggered after an event is sent to the platform
/// \param successBlock Void that gives an <code>SMSuccess</code> if the event was sent properly to the platform
///
/// \param failureBlock Void that gives an <code>SMFailure</code> if the event sendout to the platform returned any error
///
- (void)applyWithSuccessBlock:(void (^ _Nullable)(SMSuccess * _Nonnull))successBlock failureBlock:(void (^ _Nullable)(SMFailure * _Nonnull))failureBlock;
/// Inherited from NSCoding.encode(with:).
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Inherited from NSCoding.encode(with:).
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// A textual representation of the receiver.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing11SMEventUser")
@interface SMEventUser : SMEvent
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name properties:(NSDictionary * _Nullable)properties SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing16SMEventUserLogin")
@interface SMEventUserLogin : SMEventUser
/// Create an <code>SMEventUserLogin</code> event object that will be sent to selligent platform when user logs in
/// \param profileId The profile identifier (legacy <code>mail</code>)  of the user
///
/// \param properties A Dictionary containing custom properties to inject to the backend (an alternate key/value field to search for the user, if you are connecting to our platform v1)
///
- (nonnull instancetype)initWithProfileId:(NSString * _Nonnull)profileId properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing17SMEventUserLogout")
@interface SMEventUserLogout : SMEventUser
/// Create an <code>SMEventUserLogout</code> event object that will be sent to selligent platform when user logs out
/// \param profileId The profile identifier (legacy <code>mail</code>) of the user
///
/// \param properties A Dictionary containing custom properties to inject to the backend
///
- (nonnull instancetype)initWithProfileId:(NSString * _Nonnull)profileId properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing23SMEventUserRegistration")
@interface SMEventUserRegistration : SMEventUser
/// Create an <code>SMEventUserRegistration</code> event object that will be sent to selligent platform when user registers
/// \param profileId The profile identifier (legacy <code>mail</code>) of the user
///
/// \param properties A Dictionary containing custom properties to inject to the backend (an alternate key/value field to search for the user, if you are connecting to our platform v1)
///
- (nonnull instancetype)initWithProfileId:(NSString * _Nonnull)profileId properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing25SMEventUserUnregistration")
@interface SMEventUserUnregistration : SMEventUser
/// Create an <code>SMEventUserUnregistration</code> event object that will be sent to selligent platform when user unregisters
/// \param profileId The profile identifier (legacy <code>mail</code>)  of the user
///
/// \param properties A Dictionary containing custom properties to inject to the backend
///
- (nonnull instancetype)initWithProfileId:(NSString * _Nonnull)profileId properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP29SelligentMobileSDK_Geofencing9SMMessage_")
@protocol SMMessage
/// String value of the message description
@property (nonatomic, readonly, copy) NSString * _Nonnull messageSM;
@end


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing9SMFailure")
@interface SMFailure : NSObject <SMMessage>
/// Description of the failure
@property (nonatomic, readonly, copy) NSString * _Nonnull messageSM;
/// A textual representation of the receiver.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, kSMFrameworkType_, "SMFrameworkType", open) {
/// There is no hybrid framework running.
  kSMFrameworkType_None = 0,
/// ReactNative framework type.
  kSMFrameworkType_ReactNative = 1,
/// Cordova framework type.
  kSMFrameworkType_Cordova = 2,
/// XamarinNative framework type.
  kSMFrameworkType_XamarinNative = 3,
};

@class NSBundle;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing18SMUIViewController")
@interface SMUIViewController : UIViewController
/// Inherited from NSCoding.encode(with:).
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates a view controller with the nib file in the specified bundle.
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing28SMInAppContentViewController")
@interface SMInAppContentViewController : SMUIViewController
/// String containing the category of the <code>SMInAppContentViewController</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Bool set with true when the <code>SMInAppContentViewController</code> is empty
@property (nonatomic, readonly) BOOL isEmpty;
/// Specifies whether the view controller prefers the status bar to be hidden or shown.
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Called after the controller’s view is loaded into memory.
- (void)viewDidLoad;
@end

@class SMInAppContentStyleOptions;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing32SMInAppContentHTMLViewController")
@interface SMInAppContentHTMLViewController : SMInAppContentViewController
/// This will provide you a custom viewcontroller with all HTML in app content available
/// - Parameters:
/// - category: In app content category
/// - boxes: The maximum numbers of html boxes that the view controller must contain
/// - options: <code>SMInAppContentStyleOptions</code> object allowing you to customize the in app content appearance. If not specified, it will use the one passed in <code>SMManagerSetting/configureInAppContentService(with:)</code>
/// \code
/// - Warning: Must be called on the main thread
///
/// \endcode
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category boxes:(NSInteger)boxes options:(SMInAppContentStyleOptions * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Called after the controller’s view is loaded into memory.
- (void)viewDidLoad;
/// Notifies the view controller that its view was added to a view hierarchy.
- (void)viewDidAppear:(BOOL)animated;
/// A textual representation of the receiver.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing33SMInAppContentImageViewController")
@interface SMInAppContentImageViewController : SMInAppContentViewController
/// This will provide you a custom viewcontroller with one image view loaded with the url provided by an in app content for a specific category of image type
/// - Parameters:
/// - category: In app content category
/// - options: <code>SMInAppContentStyleOptions</code> object allowing you to customize the in app content appearance. If not specified, it will use the one passed in <code>SMManagerSetting/configureInAppContentService(with:)</code>
/// \code
/// - Warning: Must be called on the main thread
///
/// \endcode
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category options:(SMInAppContentStyleOptions * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Called after the controller’s view is loaded into memory.
- (void)viewDidLoad;
/// A textual representation of the receiver.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


enum kSMInAppContentType_ : NSInteger;
@class SMLink;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing21SMInAppContentMessage")
@interface SMInAppContentMessage : SMBaseMessage
/// String value providing the title of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// String value providing the content of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// String value providing the category of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// <code>SMInAppContentType</code> instance providing the in app content type of the message
@property (nonatomic, readonly) enum kSMInAppContentType_ iacType;
/// Array of SMLink objects
@property (nonatomic, readonly, copy) NSArray<SMLink *> * _Nonnull arrayIACLinks;
/// Inherited from NSCoding.encode(with:).
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Inherited from NSCoding.encode(with:).
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UIFont;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing26SMInAppContentStyleOptions")
@interface SMInAppContentStyleOptions : NSObject
/// Inform the sdk if the main container view  of your in app content must be scrollable
/// By default, it is set to true
@property (nonatomic) BOOL mainViewIsScrollable;
/// Set the main container view of your in app contents background color
/// By default, it is UIColor.clear
@property (nonatomic, strong) UIColor * _Nullable mainViewBackgroundColor;
/// Set the UIActivityIndicator style
/// By default, it is UIActivityIndicatorView.Style.gray
@property (nonatomic) UIActivityIndicatorViewStyle activityIndicatorStyle;
/// Set the boolean to determine if status bar must be hidden or not
/// By default, it is true
@property (nonatomic) BOOL isStatusBarHidden;
/// Set the leading constant between edge of view and every in app content box
/// CGFloat must be a positive value.
/// By default, it is set to 10
@property (nonatomic) CGFloat boxLeading;
/// Set the trailing constant between edge of view and every in app content box
/// CGFloat must be a positive value.
/// By default, it is set to 10
@property (nonatomic) CGFloat boxTrailing;
/// Set the Margin between bottom of a box and top of next one
/// CGFloat must be a positive value.
/// By default, it is set to 20
@property (nonatomic) CGFloat marginBetweenBoxes;
/// Set the Margin between top of first box and top of view
/// CGFloat must be a positive value.
/// By default, it is set to 20
@property (nonatomic) CGFloat marginBetweenFirstBoxAndTopOfView;
/// Set the Margin between bottom of last box and bottom of view
/// CGFloat must be a positive value.
/// By default, it is set to 20
@property (nonatomic) CGFloat marginBetweenLastBoxAndBottomOfView;
/// Set the border width for all boxes
/// CGFloat must be a positive value.
/// By default, it is set to 1
@property (nonatomic) CGFloat boxBorderWidth;
/// Set the color of box Border
/// By default, it is set to UIColor(red: 0.5, green: 0.5, blue: 0.5, alpha: 0.8)
@property (nonatomic, strong) UIColor * _Nullable boxBorderColor;
/// Set the radius of the corner for all boxes
/// CGFloat must be a positive value.
/// By default, it is not set
@property (nonatomic) CGFloat boxCornerRadius;
/// Set the background color of all boxes
/// By default, it is UIColor.clear
@property (nonatomic, strong) UIColor * _Nullable boxBackgroundColor;
/// Set the shadow color of all boxes
/// By default, it is not set
@property (nonatomic, strong) UIColor * _Nullable boxShadowColor;
/// Set the shadow opacity of all boxes
/// By default, it is not set
@property (nonatomic) float boxShadowOpacity;
/// Set the shadow radius of all boxes
/// By default, it is not set
@property (nonatomic) CGFloat boxShadowRadius;
/// Set the shadow offset of all boxes
/// By default, it is CGSize.zero
@property (nonatomic) CGSize boxShadowOffset;
/// Set the border width for title
/// By default, it is not set
@property (nonatomic) CGFloat titleBorderWidth;
/// Set the color of title border
/// By default, it is not set
@property (nonatomic, strong) UIColor * _Nullable titleBorderColor;
/// Set the radius of the corner for all boxes
/// By default, it is not set
@property (nonatomic) CGFloat titleCornerRadius;
/// Set the background color of all titles
/// By default, it is UIColor.clear
@property (nonatomic, strong) UIColor * _Nullable titleBackgroundColor;
/// Set the number of lines of all titles
/// By default, it is 1
@property (nonatomic) NSInteger titleNumberOfLines;
/// Set the NSLineBreakMode of all titles
/// By default, it is NSLineBreakMode.byWordWrapping
@property (nonatomic) NSLineBreakMode titleLineBreakMode;
/// Set the title text alignment
/// By default, it is NSTextAlignment.left
@property (nonatomic) NSTextAlignment titleTextAlignment;
/// Set the attributes that will be passed to NSAttributedString init which will create the text that will be display for title
/// By default, it is nil
@property (nonatomic, copy) NSDictionary * _Nullable titleAttributes;
/// Set title text color
/// By default, it is iOS default
@property (nonatomic, strong) UIColor * _Nullable titleTextColor;
/// Set font of the title
/// By default, it is UIFont.systemFont(ofSize: 18, weight: .black)
@property (nonatomic, strong) UIFont * _Nullable titleFont;
/// Set the trailing between the title container and the box
/// By default, it is 10.0
@property (nonatomic) CGFloat titleTrailing;
/// Set the leading between the title container and the box
/// By default, it is 10.0
@property (nonatomic) CGFloat titleLeading;
/// Set the top between the title container and the box
/// By default, it is 20.0
@property (nonatomic) CGFloat titleTop;
/// Set the shadow color of all titles
/// By default, it is not set
@property (nonatomic, strong) UIColor * _Nullable titleShadowColor;
/// Set the shadow opacity of all titles
/// By default, it is not set
@property (nonatomic) float titleShadowOpacity;
/// Set the corner radius of all titles
/// By default, it is not set
@property (nonatomic) CGFloat titleShadowRadius;
/// Set the shadow offset  of all titles
/// By default, it is not set
@property (nonatomic) CGSize titleShadowOffset;
/// Set the bool that will tell if a border bottom must be displayed under all titles in box
/// By default, it is false
@property (nonatomic) BOOL showTitleBorderBottom;
/// Set the border color of all border bottom that are displayed under all titles in box
/// By default, it is UIColor(red: 0.5, green: 0.5, blue: 0.5, alpha: 0.8)
@property (nonatomic, strong) UIColor * _Nullable titleBorderBottomColor;
/// Set the trailing between the textview and the box
/// By default, it is 20.0
@property (nonatomic) CGFloat textViewTrailing;
/// Set the leading between the textview and the box
/// By default, it is 10.0
@property (nonatomic) CGFloat textViewLeading;
/// Set the top between the textview and the box
/// By default, it is 10.0
@property (nonatomic) CGFloat textViewTop;
/// Set the textview content offset
/// By default, it is CGPoint.zero
@property (nonatomic) CGPoint textViewContentOffset;
/// Set the textview content edge inset
/// By default, it is UIEdgeInsets.zero
@property (nonatomic) UIEdgeInsets textViewContentInset;
/// Set the border width for textview
/// By default, it is not set
@property (nonatomic) CGFloat textViewBorderWidth;
/// Set the color of textview Border
/// By default, it is not set
@property (nonatomic, strong) UIColor * _Nullable textViewBorderColor;
/// Set the radius of the corner for all textview
/// By default, it is not set
@property (nonatomic) CGFloat textViewCornerRadius;
/// Set the background color of textview
/// By default, it is UIColor.clear
@property (nonatomic, strong) UIColor * _Nullable textViewBackgroundColor;
/// Set position of the links, this can be Left, Right, or Center
/// By default, it is SMContentAlignment.left
@property (nonatomic) enum kSMAlign linksAlignment;
/// Set the constant margin between links and edge of box (depends also of the linksAlignment property: if linksAligment is kSMAlignLeft than this property will only be applied for Leading margin, if linksAlignment is kSMAlignRight than this property is applied to trailing margin, if linksAlignment is kSMAlignCenter than this property is applied both for leading and trailing)
/// By default, it is 10
@property (nonatomic) CGFloat linksMargin;
/// Set the constant between links top and bottom of textview
/// By default  it is 10
@property (nonatomic) CGFloat linksTop;
/// Set the constant between links bottom and bottom of box
/// By default  it is 10
@property (nonatomic) CGFloat linksBottom;
/// Set the constant between links margin - useful when there is two links that will be displayed
/// By default  it is 10
@property (nonatomic) CGFloat marginBetweenLinks;
/// Set the border width for links
/// By default, it is not set
@property (nonatomic) CGFloat linkBorderWidth;
/// Set the color of link  Border
/// By default, it is not set
@property (nonatomic, strong) UIColor * _Nullable linkBorderColor;
/// Set the corner radius for links
/// By default, it is not set
@property (nonatomic) CGFloat linkCornerRadius;
/// Set the shadow color of all links
/// By default, it is not set
@property (nonatomic, strong) UIColor * _Nullable linkShadowColor;
/// Set the shadow opacity of all links
/// By default, it is not set
@property (nonatomic) float linkShadowOpacity;
/// Set the shadow radius of all links
/// By default, it is not set
@property (nonatomic) CGFloat linkShadowRadius;
/// Set the shadow offset of all links
/// By default, it is CGSize.zero
@property (nonatomic) CGSize linkShadowOffset;
/// Set the background color of link
/// By default, it is UIColor.clear
@property (nonatomic, strong) UIColor * _Nullable linkBackgroundColor;
/// Set the text color in link
/// By default, it is UIColor(red: 0.5, green: 0.5, blue: 0.5, alpha: 0.8)
@property (nonatomic, strong) UIColor * _Nullable linkTextColor;
/// Set the font of links
/// By default, it is iOS label default
@property (nonatomic, strong) UIFont * _Nullable linkFont;
/// Set the link content edge inset
/// By default, it is not set
@property (nonatomic) UIEdgeInsets linkContentEdgeInsets;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, kSMInAppContentType_, "SMInAppContentType", open) {
/// In App content of unknown type.
  kSMInAppContentType_Unknown = -2,
/// In App content of HTML type.
  kSMInAppContentType_Html = 1,
/// In App content of URL type.
  kSMInAppContentType_Url = 2,
/// In App content of Image type.
  kSMInAppContentType_Image = 3,
};

@class WKWebView;
@class WKNavigation;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing31SMInAppContentURLViewController")
@interface SMInAppContentURLViewController : SMInAppContentViewController <WKNavigationDelegate>
/// This will provide you a custom viewcontroller with one web view loaded with the url provided by an in app content for a specific category of an URL type
/// warning:
/// Must be called on the main thread
/// \param category In app content category
///
/// \param options <code>SMInAppContentStyleOptions</code> object allowing you to customize the in app content appearance. If not specified, it will use the one passed in <code>SMManagerSetting/configureInAppContentService(with:)</code>
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category options:(SMInAppContentStyleOptions * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Called after the controller’s view is loaded into memory.
- (void)viewDidLoad;
/// Notifies the view controller that its view is about to be added to a view hierarchy.
- (void)viewWillAppear:(BOOL)animated;
/// Inherited from WKNavigationDelegate.webView(_:didFail:withError:).
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// Inherited from WKNavigationDelegate.webView(_:didFinish:).
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
/// A textual representation of the receiver.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end





@class SMNotificationAnnotationData;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing14SMInAppMessage")
@interface SMInAppMessage : SMBaseMessage
/// String value providing the title of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// String value providing the content of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// Array of <code>SMNotificationAnnotationData</code> objects for map inapp-notification
@property (nonatomic, readonly, copy) NSArray<SMNotificationAnnotationData *> * _Nonnull arrayMapAnnotations;
/// Array of <code>SMLink</code> objects
@property (nonatomic, readonly, copy) NSArray<SMLink *> * _Nonnull arrayIAMLinks;
/// String value providing the title of the remote-notification
@property (nonatomic, readonly, copy) NSString * _Nonnull apsTitle;
/// String value providing the body of the remote-notification
@property (nonatomic, readonly, copy) NSString * _Nonnull apsBody;
/// Inherited from NSCoding.encode(with:).
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Inherited from NSCoding.encode(with:).
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



enum kSMViewTransition_ : NSInteger;
@protocol UIViewControllerTransitioningDelegate;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing26SMInAppMessageStyleOptions")
@interface SMInAppMessageStyleOptions : NSObject
/// Sets the navigation bar title color for inapp messages of type html, url, image and map
/// By default, it is set to nil to keep app’s default
/// warning:
/// Make sure to set <code>navigationMenuButtonColor</code>, <code>navigationCloseButtonColor</code> and <code>navigationArrowButtonsColor</code> else they will be by default colored with this property setting too
@property (nonatomic, strong) UIColor * _Nullable navigationTitleColor;
/// Sets the navigation bar title font for inapp messages of type html, url, image and map
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIFont * _Nullable navigationTitleFont;
/// Sets the navigation bar background color for inapp messages of type html, url, image and map
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIColor * _Nullable navigationBackgroundColor;
/// Sets whether the positions of menu and close buttons need to be switched for inapp messages of type html, url, image and map
/// By default, it is set to false (menu button is on the left side and close button on the right side, of the navigation bar)
@property (nonatomic) BOOL navigationMenuCloseButtonSwitchPosition;
/// Sets the navigation bar menu button color for inapp messages of type html, url, image and map
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIColor * _Nullable navigationMenuButtonColor;
/// Specifies a custom asset name the SDK needs to use for the menu button
/// By default, it is set to <code>SM.Menu</code>
@property (nonatomic, copy) NSString * _Nonnull navigationMenuButtonAlternateAssetName;
/// Sets the navigation bar close button color for inapp messages of type html, url, image and map
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIColor * _Nullable navigationCloseButtonColor;
/// Specifies a custom asset name the SDK needs to use for the close button
/// By default, it is set to <code>SM.Close</code>
@property (nonatomic, copy) NSString * _Nonnull navigationCloseButtonAlternateAssetName;
/// Sets the navigation bar navigation arrows button color for inapp messages of type url
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIColor * _Nullable navigationArrowButtonsColor;
/// Specifies a custom asset name the SDK needs to use for the navigation arrow back button
/// By default, it is set to <code>SM.Back</code>
@property (nonatomic, copy) NSString * _Nonnull navigationArrowBackButtonAlternateAssetName;
/// Specifies a custom asset name the SDK needs to use for the navigation arrow forward button
/// By default, it is set to <code>SM.Forward</code>
@property (nonatomic, copy) NSString * _Nonnull navigationArrowForwardButtonAlternateAssetName;
/// Sets the view background color for inapp messages of type html, url, image and map
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIColor * _Nullable viewBackgroundColor;
/// Sets the links text color for any type of inapp message
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIColor * _Nullable linksColor;
/// Defines whether the view controller will be presented and dismissed with a transition, for inapp messages of type html, url, image and map
/// By default, it is set to false
@property (nonatomic) BOOL presentWithTransition;
/// If <code>SMInAppMessageStyleOptions/presentWithTransition</code> is set to <code>true</code> and <code>SMInAppMessageStyleOptions/transitioningDelegate</code> to <code>nil</code>, you can use one <code>SMViewTransition</code>
/// By default, it is set to .horizontalSlide
@property (nonatomic) enum kSMViewTransition_ transition;
/// Defines a custom UIViewControllerTransitioningDelegate to manage the view controller transition on your own, for inapp messages of type html, url, image and map
/// By default, it is set to nil, so SDK’s default one will be used (slide left/right)
@property (nonatomic, strong) id <UIViewControllerTransitioningDelegate> _Nullable transitioningDelegate;
/// Defines whether inapps of type image can be tapped.
/// If set to true, it will use the first link defined in Selligent UI and will remove it from the list of links to show after clicking in the Menu button (hidding it if no other link has been defined)
/// By default, it is set to false
@property (nonatomic) BOOL imageCanBeTapped;
/// Sets the reload button color for inapp messages of type url and image
/// By default, it is set to nil to keep app’s default
@property (nonatomic, strong) UIColor * _Nullable reloadButtonColor;
/// Specifies a custom asset name the SDK needs to use for the reload button
/// By default, it is set to <code>SM.Reload</code>
@property (nonatomic, copy) NSString * _Nonnull reloadButtonAlternateAssetName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, kSMIA_RefreshType_, "SMInAppRefreshType", open) {
/// This explicitly disables the in-app fetch
  kSMIA_RefreshType_None = 0,
/// Allows to fetch in-app minutely (to be used only in development)
  kSMIA_RefreshType_Minutely = 1,
/// Allows to fetch in-app hourly
  kSMIA_RefreshType_Hourly = 2,
/// Allows to fetch in-app daily
  kSMIA_RefreshType_Daily = 3,
};

enum kSMNotificationButtonType_ : NSInteger;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing6SMLink")
@interface SMLink : NSObject <NSCoding>
/// String value providing the id of the button
@property (nonatomic, readonly, copy) NSString * _Nonnull idButtonData;
/// String value providing the label of the button
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// String value providing the value of the button
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// The <code>SMNotificationButtonType</code> type of action that the button will execute.
@property (nonatomic, readonly) enum kSMNotificationButtonType_ type;
/// Inherited from NSCoding.encode(with:).
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Inherited from NSCoding.encode(with:).
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM_NAMED(NSInteger, kSMLogLevel_, "SMLogLevel", open) {
/// No log printed at all.
/// This is the suggested log-level for release.
  kSMLogLevel_None = 0,
/// Default log-entry.
/// Basically inform user when library starts / ends.
  kSMLogLevel_Info = 1,
/// Only warning messages are printed
  kSMLogLevel_Warning = 2,
/// Only Error messages are being printed
  kSMLogLevel_Error = 3,
/// Print only HTTP-requests stuff
  kSMLogLevel_HttpCall = 4,
/// Print only location-requests stuff
  kSMLogLevel_Location = 5,
/// Print everything. Do not use for release!
  kSMLogLevel_All = -1,
};

@class SMManagerSetting;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing9SMManager")
@interface SMManager : NSObject
/// The current version of the library
@property (nonatomic, readonly, copy) NSString * _Nonnull versionLib;
/// Currently known Selligent device Id
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
/// Singleton for <code>SMManager</code> which allows to access public methods and properties
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SMManager * _Nonnull shared;)
+ (SMManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Mandatory method which allows SDK initialization. To be included in application:didFinishLaunchingWithOptions:
/// \param with <code>SMManagerSetting</code> instance to start-up the library
///
- (void)startWith:(SMManagerSetting * _Nonnull)settings;
/// Testing mode ONLY method.
/// It will re-configure the <code>SMManager</code> with the new settings.
/// This is a handy API in case you would like to switch between two backend environments without rebuilding your target.
/// \param settings <code>SMManagerSetting</code> instance to start-up the library
///
- (void)reloadWithSettings:(SMManagerSetting * _Nonnull)settings;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// This method allow you to send an event with pre-defined devices informations to the back-end
/// This call can be done at any time after starting the library.
/// \param deviceInfos <code>SMDeviceInfos</code> object with the necessary properties to be sent
///
- (void)sendDeviceInfo:(SMDeviceInfos * _Nonnull)deviceInfos;
@end



@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Send an event to the Selligent platform
/// \param event <code>SMEvent</code> object with your event.
///
- (void)send:(SMEvent * _Nonnull)event;
@end


@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Set the log level of the library console.
/// This is an optional setting that may help you debug the library calls.
/// This call can be done at any time (before or after starting the library).
/// However, in order to avoid missing any error log, we recommand setting this value before starting the library.
/// warning:
/// It is developer’s responsability to enable log-level in Debug or release mode.  For obvious performance reason, it is always recommended to turn log off in release mode.
/// \param logLevel Specify the appropiate <code>SMLogLevel</code> for the SDK to use.
///
- (void)apply:(enum kSMLogLevel_)logLevel;
@end


@protocol SMManagerUniversalLinksDelegate;
@class SMNotificationMessage;

@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Used to let the app manage the behaviour of <code>deeplink</code> button types containing universal links
/// \param delegate An object implementing <code>SMManagerUniversalLinksDelegate</code> methods
///
- (void)universalLinksDelegate:(id <SMManagerUniversalLinksDelegate> _Nonnull)delegate;
/// Tells to the SDK that a certain <code>SMLink</code> object has been clicked.
/// This is a convinient method when the behaviour when receiving a remote-notification is handled at App side and the standard events need to be sent back to the Selligent platform.
/// warning:
/// The App will be fully responsible of possible event duplication in the Selligent platform when implementing this method, as each execution will trigger a new event, so make sure to just trigger it once if you don’t want this to happen.
/// \param link <code>SMLink</code> that needs to be marked as clicked
///
/// \param notificationMessage The <code>SMNotificationMessage</code> from where the link was extracted.
///
- (void)setLinkAsClicked:(SMLink * _Nonnull)link from:(SMNotificationMessage * _Nonnull)notificationMessage;
@end





@class PlotSentNotification;

@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Inherited from PlotDelegate.plotNotificationSentEvent(_:).
- (void)plotNotificationSentEvent:(PlotSentNotification * _Nonnull)notification;
/// Inherited from PlotDelegate.plotNotificationOpenedEvent(_:).
- (void)plotNotificationOpenedEvent:(PlotSentNotification * _Nonnull)notification;
@end




@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Enable geolocation services.
/// This optional call will enable geolocation services at SDK level. it is independent of iOS location authorization.
/// If you use plotproject for geolocation it will be mandatory to call it if you have set enableOnFirstRun to false in the plotconfig.json.
/// Call this API according to your application’s need.
- (void)enableGeoLocation;
/// Disable geolocation services.
/// This optional call will disable geolocation services at SDK level. it is independent of iOS location authorization.
/// Call this API according to your application’s need.
- (void)disableGeoLocation;
/// Check the geolocation services status.
/// This optional call will inform you if geolocation services at SDK level are enabled. it is independent of iOS location authorization
- (BOOL)isGeoLocationEnabled SWIFT_WARN_UNUSED_RESULT;
@end





@class UNNotificationResponse;
@class UNNotification;

@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Mandatory AP when using UserNotifications framework, to be included in userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler.
/// Handles remote notification actions.
/// \param response An UNNotificationResponse that contains information about the notification and the interaction the user has done with it, provided by the delegate call
///
/// \param options <code>SMInAppMessageStyleOptions</code> object allowing you to customize the in app message appearance. If not specified, it will use the one passed in <code>SMManagerSetting/configureInAppMessageService(with:)</code>
///
- (void)didReceive:(UNNotificationResponse * _Nonnull)response options:(SMInAppMessageStyleOptions * _Nullable)options;
/// Mandatory API when using UserNotifications framework, to be included in userNotificationCenter:willPresentNotification:withCompletionHandler
/// Handles incoming remote notifications when the app is in foreground.
/// \param notification An UNNotification that contains information about the notification
///
/// \param options <code>SMInAppMessageStyleOptions</code> object allowing you to customize the in app message appearance. If not specified, it will use the one passed in <code>SMManagerSetting/configureInAppMessageService(with:)</code>
///
/// \param completionHandler A completion handler that will be called with a specific UNNotificationPresentationOption depending on the <code>SMManagerSetting/remoteMessageDisplayType</code> value specified when starting the SDK. If no completion is provided, the SDK will just send the push received event and won’t manage any kind of display/action after the remote notification was clicked
///
- (void)willPresent:(UNNotification * _Nonnull)notification options:(SMInAppMessageStyleOptions * _Nullable)options completionHandler:(void (^ _Nullable)(UNNotificationPresentationOptions))completionHandler;
/// Optional API, retrieves the <code>SMNotificationMessage</code> object from a given userInfo.
/// To be used for custom implementations when you need to get the Selligent push object from the provided userInfo to know what has been provided from the backend and use it.
///
/// returns:
/// <code>SMNotificationMessage</code> instance containing the information extracted from the given userInfo. Returns nil if the given userInfo is not a valid Selligent notification.
- (SMNotificationMessage * _Nullable)retrieveNotificationMessage:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end


@class UIView;

@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Call to show an <code>SMInAppContentViewController</code>.
/// The viewcontroller will take all available space in  the container view
/// \param controller An <code>SMInAppContentViewController</code> object
///
/// \param view An UIView where the controller will be placed
///
/// \param viewController An UIViewController  which is the parent of the view
///
- (void)showWithController:(SMInAppContentViewController * _Nonnull)controller in:(UIView * _Nonnull)view of:(UIViewController * _Nonnull)viewController;
/// This will return an array of known (and not expired) <code>SMInAppContentMessage</code>
/// \param category The category you to retrieve contents from
///
/// \param type The <code>SMInAppContentType</code> type of contents you want to retrieve
///
///
/// returns:
/// An array of <code>SMInAppContentMessage</code>
- (NSArray<SMInAppContentMessage *> * _Nonnull)getInAppContentsFor:(NSString * _Nonnull)category type:(enum kSMInAppContentType_)type SWIFT_WARN_UNUSED_RESULT;
/// This method will mark an IAC as viewed and send the Open event to the server
/// \param content The <code>SMInAppContentMessage</code> you want to mark as viewed
///
- (void)setInAppContentAsSeen:(SMInAppContentMessage * _Nonnull)content;
/// This method must be called whenever a user has clicked on a link where you manage its display
/// The action behind the link will be triggered, and the corresponding Clicked event will be sent to the backend
/// \param link The <code>SMLink</code> you want to trigger
///
/// \param inAppContent The <code>SMInAppContentMessage</code> where the link is from
///
- (void)executeLinkAction:(SMLink * _Nonnull)link inAppContent:(SMInAppContentMessage * _Nonnull)inAppContent;
/// This will tell the SDK to fetch the IAC, if the OS allows to so at that time
/// \param completion The completion block to be processed, provided by the background fetch delegate call
///
- (void)performIACFetchWithCompletion:(void (^ _Nonnull)(UIBackgroundFetchResult))completion;
@end


@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing)) <PlotDelegate>
@end





@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// In  case the sdk displays an In App Message in a WKWebView you will for example be able to process the linked click on the app side by implementing decidePolicyForNavigationAction on the provided class
/// \param delegate An object implementing WKNavigationDelegate methods
///
- (void)inAppMessageWKNavigationDelegate:(id <WKNavigationDelegate> _Nonnull)delegate;
/// Use this API inside the corresponding method in your WKNavigationDelegate when inAppMessageWKNavigationDelegate is set
/// It will enable the SDK to have the WKWebview working properly and log the error when the delegate is implemented in your App
/// \param webView The WKWebView from the WKNavigationDelegate
///
/// \param navigation The WKNavigation from the WKNavigationDelegate
///
/// \param error The Error from the WKNavigationDelegate
///
- (void)webView:(WKWebView * _Nonnull)webView didFail:(WKNavigation * _Nonnull)navigation withError:(NSError * _Nonnull)error;
/// Use this API inside the corresponding method in your WKNavigationDelegate when <code>SMManager/inAppMessageWKNavigationDelegate(_:)</code> is set
/// It will enable the SDK to have the WKWebview working properly and log the error when the delegate is implemented in your App
/// \param webView The WKWebView from the WKNavigationDelegate
///
/// \param navigation The WKNavigation from the WKNavigationDelegate
///
- (void)webView:(WKWebView * _Nonnull)webView didFinish:(WKNavigation * _Nonnull)navigation;
/// Use this API inside the corresponding method in your WKNavigationDelegate when <code>SMManager/inAppMessageWKNavigationDelegate(_:)</code> is set
/// It will enable the SDK to have the WKWebview working properly and log the error when the delegate is implemented in your App
/// \param webView The WKWebView from the WKNavigationDelegate
///
/// \param navigation The WKNavigation from the WKNavigationDelegate
///
/// \param error The Error from the WKNavigationDelegate
///
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
/// Use this API inside the corresponding method in your WKNavigationDelegate when <code>SMManager/inAppMessageWKNavigationDelegate(_:)</code> is set
/// It will enable the SDK to have the WKWebview working properly and log the error when the delegate is implemented in your App
/// \param webView The WKWebView from the WKNavigationDelegate
///
/// \param navigation The WKNavigation from the WKNavigationDelegate
///
- (void)webView:(WKWebView * _Nonnull)webView didCommit:(WKNavigation * _Nonnull)navigation;
/// This method must be called whenever a user has clicked on a link that you  manage to display
/// It will remove the view controller from your App hierarchy
- (void)removeViewController;
@end



@protocol SMManagerInAppMessageDelegate;

@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Call this API in order to enable / disable the IAM-service according to your application’s need.
/// warning:
/// Make sure the SDK is started before calling this method and the settings passed to the start call had the IAM configured
/// \param inAppMessage Boolean to enable or disable the service
///
- (void)enableInAppMessage:(BOOL)inAppMessage;
/// This will allow tell the SDK to fetch the IAM, if the OS allows to so at that time
/// \param completion The completion block to be processed, provided by the background fetch delegate call
///
- (void)performIAMFetchWithCompletion:(void (^ _Nonnull)(UIBackgroundFetchResult))completion;
/// This will return an array of known (and not expired) <code>SMInAppMessage</code>
///
/// returns:
/// An array of <code>SMInAppMessage</code>
- (NSArray<SMInAppMessage *> * _Nonnull)getInAppMessages SWIFT_WARN_UNUSED_RESULT;
/// This method will mark an IAM as viewed, send the Open event to the server and update the object in cache with isViewed property set to  true
/// \param message The <code>SMInAppMessage</code> that you want to mark as viewed
///
- (void)setInAppMessageAsSeen:(SMInAppMessage * _Nonnull)message;
/// This method will mark an IAM as unseen and update the object in cache with isViewed property set to  false
/// \param message The <code>SMInAppMessage</code> that you want to mark as viewed
///
- (void)setInAppMessageAsUnseen:(SMInAppMessage * _Nonnull)message;
/// This method will mark an IAM as deleted
/// \param message The <code>SMInAppMessage</code> that you want to mark as viewed
///
- (void)setInAppMessageAsDeleted:(SMInAppMessage * _Nonnull)message;
/// This method must be called whenever a user has clicked on a link where you manage its display
/// The action behind the link will be triggered, and the corresponding Clicked event will be sent to the backend
/// \param link The <code>SMLink</code> you want to trigger
///
/// \param inAppMessage The <code>SMInAppMessage</code> where the link is from
///
- (void)executeLinkAction:(SMLink * _Nonnull)link inAppMessage:(SMInAppMessage * _Nonnull)inAppMessage;
/// Used to let the app display the in-app message linked to a remote notification
/// \param delegate An object implementing <code>SMManagerInAppMessageDelegate</code> methods
///
- (void)inAppMessageDelegate:(id <SMManagerInAppMessageDelegate> _Nonnull)delegate;
@end

@class NSData;

@interface SMManager (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Mandatory method which allows push notification registration.
/// This API will display a dialog asking user’s permission for remote-notifications.
/// Often, this call is added right after starting the App, howeve, you may call this API later in your code according to your needs.
/// However, you may call this API later in your code according to your application need. Just remember that this call is mandatory to receive remote-notifications
- (void)registerForRemoteNotification;
/// Optional method which allows getting a provisional push token <a href="https://developer.apple.com/documentation/usernotifications/asking_permission_to_use_notifications">more info</a>
/// This API will automatically obtain a push token without asking the user, triggering <code>SMManager/registerForRemoteNotification()</code> afterwards will still present the prompt to the user.
- (void)registerForProvisionalRemoteNotification SWIFT_AVAILABILITY(ios,introduced=12.0);
/// Use this API to enable selligent push notifications on current device, by default it is enabled.
/// warning:
/// This is independent from <code>SMManager/registerForRemoteNotification()</code> and from notification settings for the App at device level.
- (void)enableRemoteNotification;
/// Use this API to disable selligent push notifications on current device, by default it is enabled.
/// warning:
/// This does not call unregisterForRemoteNotifications  on the sharedApplication instance therefore, the application can still receive third-party remote-notifications.
- (void)disableRemoteNotification;
/// Mandatory API to be included in application:didRegisterForRemoteNotificationsWithDeviceToken:
/// \param deviceToken Token data provided by the UIApplicationDelegate
///
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Optional API to be included in application:didFailToRegisterForRemoteNotificationsWithError:
/// \param error Error object provided by the UIApplicationDelegate
///
- (void)didFailToRegisterForRemoteNotificationsWith:(NSError * _Nonnull)error;
/// Display the content linked to a remote notification (usually an in-app message) or the in-app message content directly.
/// \param id The notification Id to display
///
/// \param options <code>SMInAppMessageStyleOptions</code> object allowing you to customize the in app message appearance. If not specified, it will use the one passed in <code>SMManagerSetting/configureInAppMessageService(with:)</code>
///
- (void)displayNotificationWithId:(NSString * _Nonnull)id options:(SMInAppMessageStyleOptions * _Nullable)options;
/// Display the content linked to the last received remote notification (usually an in-app message).
/// \param options <code>SMInAppMessageStyleOptions</code> object allowing you to customize the in app message appearance. If not specified, it will use the one passed in <code>SMManagerSetting/configureInAppMessageService(with:)</code>
///
- (void)displayLastReceivedRemoteNotificationWithOptions:(SMInAppMessageStyleOptions * _Nullable)options;
/// Retrieves the last received remote-notification content
///
/// returns:
/// Dictionary containing “id” and “title” keys.
- (NSDictionary<NSString *, NSString *> * _Nullable)retrieveLastRemoteNotification SWIFT_WARN_UNUSED_RESULT;
/// Tells to the SDK that a certain <code>SMNotificationMessage</code> object has been seen.
/// The SDK will send an opened event to the Selligent platform.
/// warning:
/// The App will be fully responsible of possible event duplication in the Selligent platform when implementing this method, as each execution will trigger a new event.
/// \param message The <code>SMNotificationMessage</code>object to mark as seen
///
- (void)setNotificationMessageAsSeen:(SMNotificationMessage * _Nonnull)message;
/// Mandatory API to be included in application:didReceiveRemoteNotification:fetchCompletionHandler when dealing with Silent Push
/// The SDK will send an opened event to the Selligent platform.
/// warning:
/// You must enable “Remote notifications” in your application’s background modes capabilities in order to use this API.
/// \param userInfo An Dictionary that contains information related to the remote notification, provided by the delegate call
///
/// \param completionHandler The block-completion to be processed after the download, provided by the delegate call
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler;
@end


SWIFT_PROTOCOL("_TtP29SelligentMobileSDK_Geofencing29SMManagerInAppMessageDelegate_")
@protocol SMManagerInAppMessageDelegate
/// Invoked when an in-app message linked to a remote notification should be displayed.
/// \param inAppMessage The <code>SMInAppMessage</code> object containing all necessary data for you to display content of the message
///
- (void)display:(SMInAppMessage * _Nonnull)inAppMessage;
@end

enum kSMRemoteMessageDisplayType_ : NSInteger;
@class SMManagerSettingIAM;
@class SMManagerSettingIAC;

SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing16SMManagerSetting")
@interface SMManagerSetting : NSObject
/// Once a new remote-notification is opened, the badge is automaticly reseted.
/// Should you want to handle this property yourself, you can set this property to <em>false</em> before starting the library
@property (nonatomic) BOOL shouldClearBadge;
/// This setting will enable or disable the display of inapp-messages linked to a remote-notification by the SDK.
/// After tapping a notification, the in-app will be displayed (if any).
/// Should you want to prevent that behaviour, you can set this property to <em>false</em> before starting the library.
/// warning:
/// This property does not have an impact when <code>SMManager/displayNotification(id:options:)</code> or <code>SMManager/displayLastReceivedRemoteNotification(options:)</code> are called.
/// Once you set its value to <em>true</em>, the application becomes responsible about displaying the inapp-notification linked to the received remote-notification.
@property (nonatomic) BOOL shouldDisplayRemoteNotification;
/// Used to add the in-app message associated to a remote notification to the in-app message list
/// Once a new remote-notification is received, if it contains in the payload data for an in-app message, this setting will add the in-app message to the in app messages list . You will need to listen to <code>SMConstants/kSMNotification_Event_DidReceiveInAppMessage</code> to be informed  that an in-app message is available and you can then retrieve it with <code>SMManager/getInAppMessages()</code>.
@property (nonatomic) BOOL shouldAddInAppMessageFromPushToInAppMessageList;
/// This value defines the behaviour that the SDK will adopt when a remote-notification is received when in Foreground.
/// The behaviour will be as:
/// <ul>
///   <li>
///     <em>kSMRemoteMessageDisplayType_None</em>: nothing will be displayed.
///   </li>
///   <li>
///     <em>kSMRemoteMessageDisplayType_Notification</em>: a Push Notification will be displayed.
///   </li>
///   <li>
///     <em>kSMRemoteMessageDisplayType_Automatic</em>:
///     <em>“Push + in-app notifications”</em>:
///     a. With “Message Action”: a Push Notification will be displayed (<em>UNNotificationPresentationOptionAlert</em> and <em>UNNotificationPresentationOptionBanner | UNNotificationPresentationOptionList</em> for iOS 14+).
///     b. With “Push Notification Buttons”: a Push Notification will be displayed (<em>UNNotificationPresentationOptionAlert</em> and <em>UNNotificationPresentationOptionBanner | UNNotificationPresentationOptionList</em> for iOS 14+).
///     c. With “Rich Push Content”: a Push Notification will be displayed (<em>UNNotificationPresentationOptionAlert</em> and **UNNotificationPresentationOptionBanner | UNNotificationPresentationOptionList **for iOS 14+).
///     d. Others: an in-app message will be displayed (<em>UNNotificationPresentationOptionNone</em>).
///     <em>“Mobile push”</em>: a Push Notification will be displayed (<em>UNNotificationPresentationOptionAlert</em> and <em>UNNotificationPresentationOptionBanner | UNNotificationPresentationOptionList</em> for iOS 14+).
///   </li>
/// </ul>
/// warning:
/// The SDK will only take this setting into account when the <em>UNNotificationPresentationOptions</em> completion handler is provided
/// note:
/// If not set, the default value <em>kSMRemoteMessageDisplayType_Unknown</em> will use <em>kSMRemoteMessageDisplayType_Notification</em>
@property (nonatomic) enum kSMRemoteMessageDisplayType_ remoteMessageDisplayType;
/// This value tells which type of hybrid framework is the SDK running under.
/// warning:
/// Do not set this property from your app, meant to be used by our hybrid frameworks.
@property (nonatomic) enum kSMFrameworkType_ frameworkType;
/// This value tells how often the SDK’s cache mechanism should clear itself.
/// Internally, each notification-messages has a life-span.
/// Clearing the cache stands for deleting notification-messages with an expired life-span.
/// In other words, only old notification-messages are deleted from the cache.
/// More recent ones are kept in memory until their life-span expires and a new clearCache is called.
/// By default, this value is set to <em>kSMClearCache_Auto</em>.
/// warning:
/// In 99% of the cases, you should not overide this property as the SDK is smart enough to handle the cache mechanism by itself.
@property (nonatomic) enum kSMClearCache_ clearCacheIntervalValue;
/// This value provides to the SDK  the app group id that you have previously defined in your apple developer portal.
/// It is used to allow the SDK to share data between the main app and the notification extensions (service and/or content).
/// The deviceId provided by Selligent mobile platform is stored in this container
@property (nonatomic, copy) NSString * _Nonnull appGroupId;
/// Selligent v1 support. Use this init when integrating with the old system.
/// Default-mandatory constructor to start the <code>SMManager</code> shared instance
/// \param url The endpoint of Selligent mobile servers backend
///
/// \param clientId Selligent’s mobile app Id to secure requests
///
/// \param privateKey Selligent’s mobile app Id to secure requests
///
///
/// throws:
/// NSError (where the <em>domain</em> will be <code>SMConstants/kSMErrorDomain</code> and the <em>code</em> will be one from <code>SMError</code>). Possible thrown codes for this method: <code>SMError/wrongParameters</code> (when any of the mandatory parameters are missing)
- (nullable instancetype)initWithUrl:(NSString * _Nonnull)url clientId:(NSString * _Nonnull)clientId privateKey:(NSString * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Selligent Delivery Cloud support. Use this init when integrating with the new system.
/// Default-mandatory constructor to start the <code>SMManager</code> shared instance
/// \param url The endpoint of Selligent mobile servers backend
///
/// \param appId The main app bundle Id
///
/// \param apiKey Selligent mobile apiKey to secure requests
///
/// \param legacyPrivateKey Valid privateKey from Selligent v1 mobile platform (if any)
///
///
/// throws:
/// NSError (where the <em>domain</em> will be <code>SMConstants/kSMErrorDomain</code> and the <em>code</em> will be one from <code>SMError</code>). Possible thrown codes for this method: <code>SMError/wrongParameters</code> (when any of the mandatory parameters are missing)
- (nullable instancetype)initWithUrl:(NSString * _Nonnull)url appId:(NSString * _Nonnull)appId apiKey:(NSString * _Nonnull)apiKey legacyPrivateKey:(NSString * _Nullable)legacyPrivateKey error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// This call is optional.
/// However, it is required to enable in-app messages.
/// warning:
/// Don’t forget to enable in-app messages  by calling <code>SMManager/enable(inAppMessage:)</code>.
/// \param with The <code>SMManagerSettingIAM</code> instance containing the desired configuration.
///
- (void)configureInAppMessageServiceWith:(SMManagerSettingIAM * _Nonnull)settings;
/// This call is optional.
/// However, it is required to enable in-app contents.
/// \param with The ``SMManagerSettingIAC` instance containing the desired configuration.
///
- (void)configureInAppContentServiceWith:(SMManagerSettingIAC * _Nonnull)settings;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SMManagerSetting (SWIFT_EXTENSION(SelligentMobileSDK_Geofencing))
/// Optional API to enable location services.
/// This call is useless if the sdk version is not the one associated to the plotproject framework.
/// However in the case you are using the sdk version associated to plotproject framework, it is the first step to enable Location service.
/// warning:
/// To use location service you will mandatory need to have PlotProjects framework in your app and the correct version of the Selligent SDK.
- (void)configureLocationService;
@end



SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing19SMManagerSettingIAC")
@interface SMManagerSettingIAC : NSObject
/// <code>SMInAppContentStyleOptions</code> object allowing you to globally customize the in app content appearance.
@property (nonatomic, strong) SMInAppContentStyleOptions * _Nonnull styleOptions;
/// Constructor to be used in order to create the ``SMManagerSettingIAC` instance, when you want to implement in-app contents.
/// \param refreshType The type of refresh to consider when the application goes to the foreground
///
/// \param backgroundFetch If set to <em>true</em>, it will activate UIApplication-BackGround-Fetch-mode automatically
///
- (nonnull instancetype)initWithRefreshType:(enum kSMIA_RefreshType_)refreshType backgroundFetch:(BOOL)backgroundFetch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing19SMManagerSettingIAM")
@interface SMManagerSettingIAM : NSObject
/// <code>SMInAppMessageStyleOptions</code> object allowing you to globally customize the in app message appearance.
@property (nonatomic, strong) SMInAppMessageStyleOptions * _Nonnull styleOptions;
/// Constructor to be used in order to create the <code>SMManagerSettingIAM</code> instance, when you want to implement in-app messages.
/// \param refreshType The type of refresh to consider when the application goes to the foreground
///
/// \param backgroundFetch If set to <em>true</em>, it will activate UIApplication-BackGround-Fetch-mode automatically
///
- (nonnull instancetype)initWithRefreshType:(enum kSMIA_RefreshType_)refreshType backgroundFetch:(BOOL)backgroundFetch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_PROTOCOL("_TtP29SelligentMobileSDK_Geofencing31SMManagerUniversalLinksDelegate_")
@protocol SMManagerUniversalLinksDelegate
/// Invoked when a `deeplink button type, whose URL scheme is HTTP or HTTPS, is clicked
/// \param url The URL introduced as the value of the button that has been clicked
///
- (void)executeLinkAction:(NSURL * _Nonnull)url;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, kSMMN_, "SMMessageNature", open) {
/// Message origin from push notification.
  kSMMN_Push = 0,
/// Message origin from in-app content.
  kSMMN_IaContent = 1,
/// Message origin from push in-app message.
  kSMMN_IaMessage = 2,
};


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing28SMNotificationAnnotationData")
@interface SMNotificationAnnotationData : NSObject <NSCoding, MKAnnotation>
/// CLLocationCoordinate2D instance providing the annotation’s coordinate
/// *
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// String value providing the annotation’s title
/// *
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// String value providing the annotation’s subtitle
/// *
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
/// Inherited from NSCoding.encode(with:).
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Inherited from NSCoding.encode(with:).
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, kSMNotificationButtonType_, "SMNotificationButtonType", open) {
/// Any received button-type not in this enumeration type will be considered as unknown
  kSMNotificationButtonType_Unknown = -1,
/// A button-type that will have no action but when clicked will send back button value to the platform
  kSMNotificationButtonType_Simple = 0,
/// A button-type that will open the Phone application with a ready to use number to dial
  kSMNotificationButtonType_OpenPhoneCall = 1,
/// A button-type that will open the sms application with a ready to dial sms
  kSMNotificationButtonType_OpenSms = 2,
/// A button-type that will open the mail application
  kSMNotificationButtonType_OpenMail = 3,
/// Button that will open a ready to use safari-browser
  kSMNotificationButtonType_OpenBrowser = 4,
/// Button that will open a third party application
  kSMNotificationButtonType_OpenApplication = 5,
/// Button-type which will allow application rating.
  kSMNotificationButtonType_RateApplication = 6,
/// Button that will trigger a notification inside the application for any interested listener.
/// You may register in your application to a specific event from NSNotificationCenter. The notification is broadcasted as soon as the push is received.
/// Your back-end team should inform you about the notification-name.
  kSMNotificationButtonType_CustomActionBroadcastEvent = 7,
/// Button-type which will allow user to add pkpass file inside wallet app
  kSMNotificationButtonType_Passbook = 11,
/// Button-type which will allow user depplink inside specific page in the app
  kSMNotificationButtonType_DeepLink = 13,
};


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing21SMNotificationMessage")
@interface SMNotificationMessage : SMInAppMessage
/// String value providing the title of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull mediaUrl;
/// String value providing the content of the message
@property (nonatomic, readonly, strong) SMLink * _Nullable mainAction;
/// String value providing the category of the message
@property (nonatomic, readonly, copy) NSArray<SMLink *> * _Nonnull notificationButtons;
/// Inherited from NSCoding.encode(with:).
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Inherited from NSCoding.encode(with:).
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, kSMNotificationMessageType_, "SMNotificationMessageType", open) {
/// In App message of unknown type.
  kSMNotificationMessageType_Unknown = -2,
/// In App message of hidden type.
  kSMNotificationMessageType_Hidden = -1,
/// In App message of alert type.
  kSMNotificationMessageType_Alert = 0,
/// In App message of html type.
  kSMNotificationMessageType_Html = 1,
/// In App message of url type.
  kSMNotificationMessageType_Url = 2,
/// In App message of image type.
  kSMNotificationMessageType_Image = 3,
/// In App message of map type.
  kSMNotificationMessageType_Map = 4,
/// In App message of passbook type.
  kSMNotificationMessageType_Passbook = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, kSMRemoteMessageDisplayType_, "SMRemoteMessageDisplayType", open) {
/// Default value when not explicitly set
  kSMRemoteMessageDisplayType_Unknown = 0,
/// No Push nor in-app messages will be displayed
  kSMRemoteMessageDisplayType_None = 1,
/// A Push notification will be displayed
  kSMRemoteMessageDisplayType_Notification = 2,
/// An in-app message will be displayed (when there is an in-app message available within the remote-notification payload)
  kSMRemoteMessageDisplayType_Automatic = 3,
};


SWIFT_CLASS("_TtC29SelligentMobileSDK_Geofencing9SMSuccess")
@interface SMSuccess : NSObject <SMMessage>
/// Description of the success
@property (nonatomic, readonly, copy) NSString * _Nonnull messageSM;
/// A textual representation of the receiver.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, kSMViewTransition_, "SMViewTransition", open) {
/// New view enters the screen sliding form the right while current view leaves the screen sliding to the left, and the other way around when the new view is dismissed
  kSMViewTransition_HorizontalSlide = 1,
/// New view enters the screen sliding form the bottom while current view doesn’t move, and the other way around when the new view is dismissed
  kSMViewTransition_VerticalSlide = 2,
};



















#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
